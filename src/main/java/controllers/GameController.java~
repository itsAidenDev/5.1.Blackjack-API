package controllers;

import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
//import entities.MoveRequest;
import entities.Player;
import entities.gameSessions.Game;
import service.GameService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/game")
@RequiredArgsConstructor
public class GameController {
    private final GameService service;

    @PostMapping("/new")
    public Mono<ResponseEntity<Game>> createGame(@RequestBody String playerName) {
        return service.createGame(playerName)
                .map(game -> ResponseEntity.status(HttpStatus.CREATED).body(game));
    }

    @GetMapping("/{id}")
    public Mono<ResponseEntity<Game>> getGame(@PathVariable String id) {
        return service.getGame(id)
                .map(ResponseEntity::ok)
                .defaultIfEmpty(ResponseEntity.notFound().build());
    }

    @PostMapping("/{id}/play")
    public Mono<ResponseEntity<Game>> startGame(@PathVariable String id, @RequestBody MoveRequest move) {
        return service.startGame(id, move).map(ResponseEntity::ok);
    }

    @DeleteMapping("/{id}/delete")
    public Mono<ResponseEntity<Void>> deleteGame(@PathVariable String id) {
        return service.deleteGame(id).thenReturn(ResponseEntity.noContent().build());
    }

    @GetMapping("/ranking")
    public Flux<Player> getRanking() {
        return service.getRanking();
    }

    @PutMapping("/player/{playerId}")
    public Mono<Player> rename(@PathVariable Long playerId, @RequestBody String newName) {
        return service.renamePlayer(playerId, newName);
    }
}